
STM32F1_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000054c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000658  08000658  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000658  08000658  00010658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800065c  0800065c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08000660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000024  08000684  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000054  08000684  00020054  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   000008bf  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002cd  00000000  00000000  0002090c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000098  00000000  00000000  00020be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00020c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000004dc  00000000  00000000  00020ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000038f  00000000  00000000  000211c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00021553  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000160  00000000  00000000  000215d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08000640 	.word	0x08000640

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08000640 	.word	0x08000640

0800014c <main>:

void makeItGoFast(void);


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	makeItGoFast();
 8000152:	f000 f81b 	bl	800018c <makeItGoFast>
	Flash_Write(page_adress, &data_write, sizeof(data_write));
 8000156:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <main+0x34>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	220c      	movs	r2, #12
 800015c:	4909      	ldr	r1, [pc, #36]	; (8000184 <main+0x38>)
 800015e:	4618      	mov	r0, r3
 8000160:	f000 f85e 	bl	8000220 <Flash_Write>
	Flash_Read(page_adress, &data_read, sizeof(data_read));
 8000164:	4b06      	ldr	r3, [pc, #24]	; (8000180 <main+0x34>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	220c      	movs	r2, #12
 800016a:	4907      	ldr	r1, [pc, #28]	; (8000188 <main+0x3c>)
 800016c:	4618      	mov	r0, r3
 800016e:	f000 f8cb 	bl	8000308 <Flash_Read>

	int i = 1;
 8000172:	2301      	movs	r3, #1
 8000174:	607b      	str	r3, [r7, #4]

	/* Infinite loop */
	while (1)
	{
		i++;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	e7fb      	b.n	8000176 <main+0x2a>
 800017e:	bf00      	nop
 8000180:	2000000c 	.word	0x2000000c
 8000184:	20000000 	.word	0x20000000
 8000188:	20000040 	.word	0x20000040

0800018c <makeItGoFast>:
	}
}

void makeItGoFast(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	   // Conf clock : 72MHz using HSE 8MHz crystal w/ PLL X 9 (8MHz x 9 = 72MHz)
    FLASH->ACR      |= FLASH_ACR_LATENCY_2; // Two wait states, per datasheet
 8000190:	4a21      	ldr	r2, [pc, #132]	; (8000218 <makeItGoFast+0x8c>)
 8000192:	4b21      	ldr	r3, [pc, #132]	; (8000218 <makeItGoFast+0x8c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f043 0302 	orr.w	r3, r3, #2
 800019a:	6013      	str	r3, [r2, #0]
    RCC->CFGR       |= RCC_CFGR_PPRE1_2;    // prescale APB1 = HCLK/2
 800019c:	4a1f      	ldr	r2, [pc, #124]	; (800021c <makeItGoFast+0x90>)
 800019e:	4b1f      	ldr	r3, [pc, #124]	; (800021c <makeItGoFast+0x90>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001a6:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_HSEON;        // enable HSE clock
 80001a8:	4a1c      	ldr	r2, [pc, #112]	; (800021c <makeItGoFast+0x90>)
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <makeItGoFast+0x90>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001b2:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_HSERDY) );    // wait for the HSEREADY flag
 80001b4:	bf00      	nop
 80001b6:	4b19      	ldr	r3, [pc, #100]	; (800021c <makeItGoFast+0x90>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d0f9      	beq.n	80001b6 <makeItGoFast+0x2a>

    RCC->CFGR       |= RCC_CFGR_PLLSRC;     // set PLL source to HSE
 80001c2:	4a16      	ldr	r2, [pc, #88]	; (800021c <makeItGoFast+0x90>)
 80001c4:	4b15      	ldr	r3, [pc, #84]	; (800021c <makeItGoFast+0x90>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001cc:	6053      	str	r3, [r2, #4]
    RCC->CFGR       |= RCC_CFGR_PLLMULL9;   // multiply by 9
 80001ce:	4a13      	ldr	r2, [pc, #76]	; (800021c <makeItGoFast+0x90>)
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <makeItGoFast+0x90>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001d8:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_PLLON;        // enable the PLL
 80001da:	4a10      	ldr	r2, [pc, #64]	; (800021c <makeItGoFast+0x90>)
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <makeItGoFast+0x90>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e4:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_PLLRDY) );    // wait for the PLLRDY flag
 80001e6:	bf00      	nop
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <makeItGoFast+0x90>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f9      	beq.n	80001e8 <makeItGoFast+0x5c>

    RCC->CFGR       |= RCC_CFGR_SW_PLL;     // set clock source to pll
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <makeItGoFast+0x90>)
 80001f6:	4b09      	ldr	r3, [pc, #36]	; (800021c <makeItGoFast+0x90>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f043 0302 	orr.w	r3, r3, #2
 80001fe:	6053      	str	r3, [r2, #4]

    while( !(RCC->CFGR & RCC_CFGR_SWS_PLL) );    // wait for PLL to be CLK
 8000200:	bf00      	nop
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <makeItGoFast+0x90>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	f003 0308 	and.w	r3, r3, #8
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <makeItGoFast+0x76>

    SystemCoreClockUpdate();                // calculate the SYSCLOCK value
 800020e:	f000 f901 	bl	8000414 <SystemCoreClockUpdate>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40022000 	.word	0x40022000
 800021c:	40021000 	.word	0x40021000

08000220 <Flash_Write>:

void Flash_Write(uint32_t StartPageAddress, void *Data, uint16_t sizeofdata)
{
 8000220:	b480      	push	{r7}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	4613      	mov	r3, r2
 800022c:	80fb      	strh	r3, [r7, #6]
	int index=0;
 800022e:	2300      	movs	r3, #0
 8000230:	61fb      	str	r3, [r7, #28]
	// Unlock flash registers
	uint16_t *adres;
	uint16_t *data;
	adres=( uint16_t *)StartPageAddress;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	61bb      	str	r3, [r7, #24]
	data= ( uint16_t *)Data;
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	617b      	str	r3, [r7, #20]
	sizeofdata/=2;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	085b      	lsrs	r3, r3, #1
 800023e:	80fb      	strh	r3, [r7, #6]

	if(!(Check_Bit(FLASH->SR,FLASH_SR_BSY)))      		//check if bsy flag is zero
 8000240:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <Flash_Write+0xdc>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b00      	cmp	r3, #0
 800024a:	d121      	bne.n	8000290 <Flash_Write+0x70>
	{
		FLASH->KEYR = 0x45670123;
 800024c:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <Flash_Write+0xdc>)
 800024e:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <Flash_Write+0xe0>)
 8000250:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <Flash_Write+0xdc>)
 8000254:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <Flash_Write+0xe4>)
 8000256:	605a      	str	r2, [r3, #4]
		FLASH->CR &= ~(1<<0);
 8000258:	4a28      	ldr	r2, [pc, #160]	; (80002fc <Flash_Write+0xdc>)
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <Flash_Write+0xdc>)
 800025c:	691b      	ldr	r3, [r3, #16]
 800025e:	f023 0301 	bic.w	r3, r3, #1
 8000262:	6113      	str	r3, [r2, #16]
		FLASH->CR |= (1<<1);           					// FLASH PAGE ERASE ENABLE
 8000264:	4a25      	ldr	r2, [pc, #148]	; (80002fc <Flash_Write+0xdc>)
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <Flash_Write+0xdc>)
 8000268:	691b      	ldr	r3, [r3, #16]
 800026a:	f043 0302 	orr.w	r3, r3, #2
 800026e:	6113      	str	r3, [r2, #16]
		FLASH->AR = StartPageAddress;  					// page adress will be erased
 8000270:	4a22      	ldr	r2, [pc, #136]	; (80002fc <Flash_Write+0xdc>)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	6153      	str	r3, [r2, #20]
		FLASH->CR |= (1<<6);           					// Start selected operation here erasing
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <Flash_Write+0xdc>)
 8000278:	4b20      	ldr	r3, [pc, #128]	; (80002fc <Flash_Write+0xdc>)
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000280:	6113      	str	r3, [r2, #16]
		while(Check_Bit(FLASH->SR,FLASH_SR_BSY));	  	//wait till busy flag is zero
 8000282:	bf00      	nop
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <Flash_Write+0xdc>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	f003 0302 	and.w	r3, r3, #2
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1f9      	bne.n	8000284 <Flash_Write+0x64>

	}
	if(!(Check_Bit(FLASH->SR,FLASH_SR_BSY)))   	  		//check if bsy flag is zero
 8000290:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <Flash_Write+0xdc>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	f003 0302 	and.w	r3, r3, #2
 8000298:	2b00      	cmp	r3, #0
 800029a:	d12a      	bne.n	80002f2 <Flash_Write+0xd2>
	{
		FLASH->KEYR = 0x45670123;
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <Flash_Write+0xdc>)
 800029e:	4a18      	ldr	r2, [pc, #96]	; (8000300 <Flash_Write+0xe0>)
 80002a0:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <Flash_Write+0xdc>)
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <Flash_Write+0xe4>)
 80002a6:	605a      	str	r2, [r3, #4]
		FLASH->CR &= ~(1<<1); 							//deselect erase mode
 80002a8:	4a14      	ldr	r2, [pc, #80]	; (80002fc <Flash_Write+0xdc>)
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <Flash_Write+0xdc>)
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	f023 0302 	bic.w	r3, r3, #2
 80002b2:	6113      	str	r3, [r2, #16]
		FLASH->CR |= (1<<0);            				// FLASH PAGE PROGRAMME ENABLE
 80002b4:	4a11      	ldr	r2, [pc, #68]	; (80002fc <Flash_Write+0xdc>)
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <Flash_Write+0xdc>)
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6113      	str	r3, [r2, #16]
		while(sizeofdata>index)
 80002c0:	e013      	b.n	80002ea <Flash_Write+0xca>
		{
		*adres=*data;
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	69bb      	ldr	r3, [r7, #24]
 80002c8:	801a      	strh	r2, [r3, #0]
		while((Check_Bit(FLASH->SR,FLASH_SR_BSY))); 	//check if bsy flag is zero
 80002ca:	bf00      	nop
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <Flash_Write+0xdc>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	f003 0302 	and.w	r3, r3, #2
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1f9      	bne.n	80002cc <Flash_Write+0xac>
		adres++;
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	3302      	adds	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
		data++;
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3302      	adds	r3, #2
 80002e2:	617b      	str	r3, [r7, #20]
		index++;
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	3301      	adds	r3, #1
 80002e8:	61fb      	str	r3, [r7, #28]
		while(sizeofdata>index)
 80002ea:	88fa      	ldrh	r2, [r7, #6]
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	dce7      	bgt.n	80002c2 <Flash_Write+0xa2>
		}
	}
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40022000 	.word	0x40022000
 8000300:	45670123 	.word	0x45670123
 8000304:	cdef89ab 	.word	0xcdef89ab

08000308 <Flash_Read>:

void Flash_Read(uint32_t adress, void *data , int size)
{
 8000308:	b480      	push	{r7}
 800030a:	b089      	sub	sp, #36	; 0x24
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	size/=2;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0fda      	lsrs	r2, r3, #31
 8000318:	4413      	add	r3, r2
 800031a:	105b      	asrs	r3, r3, #1
 800031c:	607b      	str	r3, [r7, #4]
    uint16_t *AddressPtr;
    uint16_t *valuePtr;
    AddressPtr = (uint16_t *)adress;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	61fb      	str	r3, [r7, #28]
    valuePtr=(uint16_t *)data;
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	61bb      	str	r3, [r7, #24]
    for(int i=0 ; i<size; i++)
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	e00c      	b.n	8000346 <Flash_Read+0x3e>
    {
        *((uint16_t *)valuePtr)=*((uint16_t *)AddressPtr);
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	881a      	ldrh	r2, [r3, #0]
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	801a      	strh	r2, [r3, #0]
        valuePtr++;
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	3302      	adds	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
        AddressPtr++;
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	3302      	adds	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
    for(int i=0 ; i<size; i++)
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	3301      	adds	r3, #1
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	697a      	ldr	r2, [r7, #20]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	dbee      	blt.n	800032c <Flash_Read+0x24>
    }
}
 800034e:	bf00      	nop
 8000350:	3724      	adds	r7, #36	; 0x24
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000390 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800035c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800035e:	e003      	b.n	8000368 <LoopCopyDataInit>

08000360 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000362:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000364:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000366:	3104      	adds	r1, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000368:	480b      	ldr	r0, [pc, #44]	; (8000398 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800036c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800036e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000370:	d3f6      	bcc.n	8000360 <CopyDataInit>
	ldr	r2, =_sbss
 8000372:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000374:	e002      	b.n	800037c <LoopFillZerobss>

08000376 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000376:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000378:	f842 3b04 	str.w	r3, [r2], #4

0800037c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800037e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000380:	d3f9      	bcc.n	8000376 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000382:	f000 f813 	bl	80003ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000386:	f000 f937 	bl	80005f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800038a:	f7ff fedf 	bl	800014c <main>
	bx	lr
 800038e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000390:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000394:	08000660 	.word	0x08000660
	ldr	r0, =_sdata
 8000398:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800039c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 80003a0:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 80003a4:	20000054 	.word	0x20000054

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b0:	4a15      	ldr	r2, [pc, #84]	; (8000408 <SystemInit+0x5c>)
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <SystemInit+0x5c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003bc:	4912      	ldr	r1, [pc, #72]	; (8000408 <SystemInit+0x5c>)
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <SystemInit+0x5c>)
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <SystemInit+0x60>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003c8:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <SystemInit+0x5c>)
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x5c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <SystemInit+0x5c>)
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SystemInit+0x5c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <SystemInit+0x5c>)
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <SystemInit+0x5c>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SystemInit+0x5c>)
 80003f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003f6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80003f8:	f000 f878 	bl	80004ec <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SystemInit+0x64>)
 80003fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000402:	609a      	str	r2, [r3, #8]
#endif 
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000
 800040c:	f8ff0000 	.word	0xf8ff0000
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <SystemCoreClockUpdate+0xc4>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	f003 030c 	and.w	r3, r3, #12
 800042e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d007      	beq.n	8000446 <SystemCoreClockUpdate+0x32>
 8000436:	2b08      	cmp	r3, #8
 8000438:	d009      	beq.n	800044e <SystemCoreClockUpdate+0x3a>
 800043a:	2b00      	cmp	r3, #0
 800043c:	d133      	bne.n	80004a6 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800043e:	4b27      	ldr	r3, [pc, #156]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 8000440:	4a27      	ldr	r2, [pc, #156]	; (80004e0 <SystemCoreClockUpdate+0xcc>)
 8000442:	601a      	str	r2, [r3, #0]
      break;
 8000444:	e033      	b.n	80004ae <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000446:	4b25      	ldr	r3, [pc, #148]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 8000448:	4a25      	ldr	r2, [pc, #148]	; (80004e0 <SystemCoreClockUpdate+0xcc>)
 800044a:	601a      	str	r2, [r3, #0]
      break;
 800044c:	e02f      	b.n	80004ae <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <SystemCoreClockUpdate+0xc4>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000456:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <SystemCoreClockUpdate+0xc4>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000460:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	0c9b      	lsrs	r3, r3, #18
 8000466:	3302      	adds	r3, #2
 8000468:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d106      	bne.n	800047e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <SystemCoreClockUpdate+0xd0>)
 8000474:	fb02 f303 	mul.w	r3, r2, r3
 8000478:	4a18      	ldr	r2, [pc, #96]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 800047a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800047c:	e017      	b.n	80004ae <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <SystemCoreClockUpdate+0xc4>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d006      	beq.n	8000498 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <SystemCoreClockUpdate+0xd0>)
 800048e:	fb02 f303 	mul.w	r3, r2, r3
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 8000494:	6013      	str	r3, [r2, #0]
      break;
 8000496:	e00a      	b.n	80004ae <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <SystemCoreClockUpdate+0xcc>)
 800049c:	fb02 f303 	mul.w	r3, r2, r3
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 80004a2:	6013      	str	r3, [r2, #0]
      break;
 80004a4:	e003      	b.n	80004ae <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <SystemCoreClockUpdate+0xcc>)
 80004aa:	601a      	str	r2, [r3, #0]
      break;
 80004ac:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <SystemCoreClockUpdate+0xc4>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	091b      	lsrs	r3, r3, #4
 80004b4:	f003 030f 	and.w	r3, r3, #15
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <SystemCoreClockUpdate+0xd4>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	fa22 f303 	lsr.w	r3, r2, r3
 80004ca:	4a04      	ldr	r2, [pc, #16]	; (80004dc <SystemCoreClockUpdate+0xc8>)
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000
 80004dc:	20000010 	.word	0x20000010
 80004e0:	007a1200 	.word	0x007a1200
 80004e4:	003d0900 	.word	0x003d0900
 80004e8:	20000014 	.word	0x20000014

080004ec <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80004f0:	f000 f802 	bl	80004f8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000506:	4a3a      	ldr	r2, [pc, #232]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000508:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <SetSysClockTo72+0xf8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000510:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000512:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d103      	bne.n	8000530 <SetSysClockTo72+0x38>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800052e:	d1f0      	bne.n	8000512 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000530:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800053c:	2301      	movs	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	e001      	b.n	8000546 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d14b      	bne.n	80005e4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <SetSysClockTo72+0xfc>)
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SetSysClockTo72+0xfc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000558:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <SetSysClockTo72+0xfc>)
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SetSysClockTo72+0xfc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f023 0303 	bic.w	r3, r3, #3
 8000562:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000564:	4a23      	ldr	r2, [pc, #140]	; (80005f4 <SetSysClockTo72+0xfc>)
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <SetSysClockTo72+0xfc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f043 0302 	orr.w	r3, r3, #2
 800056e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <SetSysClockTo72+0xf8>)
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <SetSysClockTo72+0xf8>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800058c:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <SetSysClockTo72+0xf8>)
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <SetSysClockTo72+0xf8>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000596:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <SetSysClockTo72+0xf8>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <SetSysClockTo72+0xf8>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80005a2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ae:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005b0:	bf00      	nop
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005be:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f023 0303 	bic.w	r3, r3, #3
 80005c8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80005ca:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80005d6:	bf00      	nop
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <SetSysClockTo72+0xf8>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	f003 030c 	and.w	r3, r3, #12
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	d1f9      	bne.n	80005d8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40022000 	.word	0x40022000

080005f8 <__libc_init_array>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2500      	movs	r5, #0
 80005fc:	4e0c      	ldr	r6, [pc, #48]	; (8000630 <__libc_init_array+0x38>)
 80005fe:	4c0d      	ldr	r4, [pc, #52]	; (8000634 <__libc_init_array+0x3c>)
 8000600:	1ba4      	subs	r4, r4, r6
 8000602:	10a4      	asrs	r4, r4, #2
 8000604:	42a5      	cmp	r5, r4
 8000606:	d109      	bne.n	800061c <__libc_init_array+0x24>
 8000608:	f000 f81a 	bl	8000640 <_init>
 800060c:	2500      	movs	r5, #0
 800060e:	4e0a      	ldr	r6, [pc, #40]	; (8000638 <__libc_init_array+0x40>)
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <__libc_init_array+0x44>)
 8000612:	1ba4      	subs	r4, r4, r6
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	42a5      	cmp	r5, r4
 8000618:	d105      	bne.n	8000626 <__libc_init_array+0x2e>
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000620:	4798      	blx	r3
 8000622:	3501      	adds	r5, #1
 8000624:	e7ee      	b.n	8000604 <__libc_init_array+0xc>
 8000626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800062a:	4798      	blx	r3
 800062c:	3501      	adds	r5, #1
 800062e:	e7f2      	b.n	8000616 <__libc_init_array+0x1e>
 8000630:	08000658 	.word	0x08000658
 8000634:	08000658 	.word	0x08000658
 8000638:	08000658 	.word	0x08000658
 800063c:	0800065c 	.word	0x0800065c

08000640 <_init>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr

0800064c <_fini>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr
