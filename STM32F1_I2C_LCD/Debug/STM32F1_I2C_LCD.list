
STM32F1_I2C_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000087c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000988  08000988  00010988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080009a4  080009a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009a8  080009a8  000109a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080009ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000014  080009c0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000030  080009c0  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001165  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000576  00000000  00000000  000211a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000150  00000000  00000000  00021718  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00021868  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000acc  00000000  00000000  00021960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000056c  00000000  00000000  0002242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022998  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000384  00000000  00000000  00022a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000970 	.word	0x08000970

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000970 	.word	0x08000970

0800014c <lcd_put_data>:
#include <i2c.h>
#include "LCD.h"
#include "timer.h"
void lcd_put_data(char data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

	char datanew[2];
	uint8_t son[6];	
	//D7-D4 0 ENABLE RW RS
	datanew[0] = (data&0xf0);       //low bits
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	b2db      	uxtb	r3, r3
 800015e:	753b      	strb	r3, [r7, #20]
	datanew[0] |= (9<<0);           // rs and open 1
 8000160:	7d3b      	ldrb	r3, [r7, #20]
 8000162:	f043 0309 	orr.w	r3, r3, #9
 8000166:	b2db      	uxtb	r3, r3
 8000168:	753b      	strb	r3, [r7, #20]
	datanew[1] = ((data<<4)&0xf0);  //high bits
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	011b      	lsls	r3, r3, #4
 800016e:	b2db      	uxtb	r3, r3
 8000170:	757b      	strb	r3, [r7, #21]
	datanew[1] |= (9<<0);           // rs and open 1
 8000172:	7d7b      	ldrb	r3, [r7, #21]
 8000174:	f043 0309 	orr.w	r3, r3, #9
 8000178:	b2db      	uxtb	r3, r3
 800017a:	757b      	strb	r3, [r7, #21]
	son[0] = datanew[0];
 800017c:	7d3b      	ldrb	r3, [r7, #20]
 800017e:	733b      	strb	r3, [r7, #12]
	son[1]= datanew[0] | (1<<2);  // enable
 8000180:	7d3b      	ldrb	r3, [r7, #20]
 8000182:	f043 0304 	orr.w	r3, r3, #4
 8000186:	b2db      	uxtb	r3, r3
 8000188:	737b      	strb	r3, [r7, #13]
	son[2] =datanew[0];
 800018a:	7d3b      	ldrb	r3, [r7, #20]
 800018c:	73bb      	strb	r3, [r7, #14]
	son[3] = datanew[1];
 800018e:	7d7b      	ldrb	r3, [r7, #21]
 8000190:	73fb      	strb	r3, [r7, #15]
	son[4]= datanew[1] | (1<<2);  // enable
 8000192:	7d7b      	ldrb	r3, [r7, #21]
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	b2db      	uxtb	r3, r3
 800019a:	743b      	strb	r3, [r7, #16]
	son[5] =datanew[1];
 800019c:	7d7b      	ldrb	r3, [r7, #21]
 800019e:	747b      	strb	r3, [r7, #17]
	
	i2c_start();
 80001a0:	f000 f92e 	bl	8000400 <i2c_start>
	i2c_address(SLAVE_ADDRESS_LCD);
 80001a4:	204e      	movs	r0, #78	; 0x4e
 80001a6:	f000 f96b 	bl	8000480 <i2c_address>
	i2c_write_multi(son,6);
 80001aa:	f107 030c 	add.w	r3, r7, #12
 80001ae:	2106      	movs	r1, #6
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f997 	bl	80004e4 <i2c_write_multi>
	i2c_stop();
 80001b6:	f000 f985 	bl	80004c4 <i2c_stop>

}
 80001ba:	bf00      	nop
 80001bc:	3718      	adds	r7, #24
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}

080001c2 <lcd_put_string>:

void lcd_put_string (char *str)
{
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b082      	sub	sp, #8
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_put_data (*str++);
 80001ca:	e006      	b.n	80001da <lcd_put_string+0x18>
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	1c5a      	adds	r2, r3, #1
 80001d0:	607a      	str	r2, [r7, #4]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f7ff ffb9 	bl	800014c <lcd_put_data>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d1f4      	bne.n	80001cc <lcd_put_string+0xa>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}

080001ea <lcd_put_cmd>:

void lcd_put_cmd(char cmdl)
{
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b086      	sub	sp, #24
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	4603      	mov	r3, r0
 80001f2:	71fb      	strb	r3, [r7, #7]
	char datanew[2];
	uint8_t son[6];	
	//D7-D4 0 ENABLE RW RS
	datanew[0] = (cmdl&0xf0);       //low bits
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f023 030f 	bic.w	r3, r3, #15
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	753b      	strb	r3, [r7, #20]
	datanew[0] |= (1<<3);           // rs and open 1
 80001fe:	7d3b      	ldrb	r3, [r7, #20]
 8000200:	f043 0308 	orr.w	r3, r3, #8
 8000204:	b2db      	uxtb	r3, r3
 8000206:	753b      	strb	r3, [r7, #20]
	datanew[1] = ((cmdl<<4)&0xf0);  //high bits
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	011b      	lsls	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	757b      	strb	r3, [r7, #21]
	datanew[1] |= (1<<3);           // rs and open 1
 8000210:	7d7b      	ldrb	r3, [r7, #21]
 8000212:	f043 0308 	orr.w	r3, r3, #8
 8000216:	b2db      	uxtb	r3, r3
 8000218:	757b      	strb	r3, [r7, #21]
	son[0] = datanew[0];
 800021a:	7d3b      	ldrb	r3, [r7, #20]
 800021c:	733b      	strb	r3, [r7, #12]
	son[1]= datanew[0] | (1<<2);  // enable
 800021e:	7d3b      	ldrb	r3, [r7, #20]
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	b2db      	uxtb	r3, r3
 8000226:	737b      	strb	r3, [r7, #13]
	son[2] =datanew[0];
 8000228:	7d3b      	ldrb	r3, [r7, #20]
 800022a:	73bb      	strb	r3, [r7, #14]
	son[3] = datanew[1];
 800022c:	7d7b      	ldrb	r3, [r7, #21]
 800022e:	73fb      	strb	r3, [r7, #15]
	son[4]= datanew[1] | (1<<2);  // enable
 8000230:	7d7b      	ldrb	r3, [r7, #21]
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	b2db      	uxtb	r3, r3
 8000238:	743b      	strb	r3, [r7, #16]
	son[5] =datanew[1];
 800023a:	7d7b      	ldrb	r3, [r7, #21]
 800023c:	747b      	strb	r3, [r7, #17]
	
	i2c_start();
 800023e:	f000 f8df 	bl	8000400 <i2c_start>
	i2c_address(SLAVE_ADDRESS_LCD);
 8000242:	204e      	movs	r0, #78	; 0x4e
 8000244:	f000 f91c 	bl	8000480 <i2c_address>
	i2c_write_multi(son,6);
 8000248:	f107 030c 	add.w	r3, r7, #12
 800024c:	2106      	movs	r1, #6
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f948 	bl	80004e4 <i2c_write_multi>
	i2c_stop();
 8000254:	f000 f936 	bl	80004c4 <i2c_stop>
	delay_ms(2);
 8000258:	2002      	movs	r0, #2
 800025a:	f000 f977 	bl	800054c <delay_ms>

}
 800025e:	bf00      	nop
 8000260:	3718      	adds	r7, #24
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <lcd_put_curs>:

void lcd_put_curs(int x, int y)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b084      	sub	sp, #16
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
	uint8_t location = 0x80 + (x +(0x40*y));
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	019b      	lsls	r3, r3, #6
 8000276:	b2da      	uxtb	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	4413      	add	r3, r2
 800027e:	b2db      	uxtb	r3, r3
 8000280:	3b80      	subs	r3, #128	; 0x80
 8000282:	73fb      	strb	r3, [r7, #15]
	lcd_put_cmd (location);
 8000284:	7bfb      	ldrb	r3, [r7, #15]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ffaf 	bl	80001ea <lcd_put_cmd>
}
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <lcd_init>:


void lcd_init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	
	uint8_t data = 0b00100000;
 800029a:	2320      	movs	r3, #32
 800029c:	71fb      	strb	r3, [r7, #7]
	data|= (1<<3);
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f043 0308 	orr.w	r3, r3, #8
 80002a4:	71fb      	strb	r3, [r7, #7]
	i2c_start();
 80002a6:	f000 f8ab 	bl	8000400 <i2c_start>
	i2c_address(SLAVE_ADDRESS_LCD);
 80002aa:	204e      	movs	r0, #78	; 0x4e
 80002ac:	f000 f8e8 	bl	8000480 <i2c_address>
	i2c_write(data);
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f8c4 	bl	8000440 <i2c_write>
	i2c_stop();
 80002b8:	f000 f904 	bl	80004c4 <i2c_stop>



	data |= (1<<2);  // enable 1
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	71fb      	strb	r3, [r7, #7]
	i2c_start();
 80002c4:	f000 f89c 	bl	8000400 <i2c_start>
	i2c_address(SLAVE_ADDRESS_LCD);
 80002c8:	204e      	movs	r0, #78	; 0x4e
 80002ca:	f000 f8d9 	bl	8000480 <i2c_address>
	i2c_write(data);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8b5 	bl	8000440 <i2c_write>
	i2c_stop();
 80002d6:	f000 f8f5 	bl	80004c4 <i2c_stop>
	delay_ms(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 f936 	bl	800054c <delay_ms>

	data &= ~(1<<2);  //  enable 0
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f023 0304 	bic.w	r3, r3, #4
 80002e6:	71fb      	strb	r3, [r7, #7]
	i2c_start();
 80002e8:	f000 f88a 	bl	8000400 <i2c_start>
	i2c_address(SLAVE_ADDRESS_LCD);
 80002ec:	204e      	movs	r0, #78	; 0x4e
 80002ee:	f000 f8c7 	bl	8000480 <i2c_address>
	i2c_write(data);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f8a3 	bl	8000440 <i2c_write>
	i2c_stop();
 80002fa:	f000 f8e3 	bl	80004c4 <i2c_stop>
	delay_ms(100);
 80002fe:	2064      	movs	r0, #100	; 0x64
 8000300:	f000 f924 	bl	800054c <delay_ms>

	lcd_put_cmd(40);  // 4 bit and 2 line
 8000304:	2028      	movs	r0, #40	; 0x28
 8000306:	f7ff ff70 	bl	80001ea <lcd_put_cmd>
	delay_ms(500);
 800030a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030e:	f000 f91d 	bl	800054c <delay_ms>
	
	lcd_put_cmd(clear);  // clear display
 8000312:	2001      	movs	r0, #1
 8000314:	f7ff ff69 	bl	80001ea <lcd_put_cmd>
	delay_ms(500);
 8000318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031c:	f000 f916 	bl	800054c <delay_ms>
	lcd_put_cmd(gohome); // go home
 8000320:	2002      	movs	r0, #2
 8000322:	f7ff ff62 	bl	80001ea <lcd_put_cmd>
	delay_ms(500);
 8000326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032a:	f000 f90f 	bl	800054c <delay_ms>
	lcd_put_cmd(15);     //display, cursor and blink on
 800032e:	200f      	movs	r0, #15
 8000330:	f7ff ff5b 	bl	80001ea <lcd_put_cmd>
	delay_ms(500);
 8000334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000338:	f000 f908 	bl	800054c <delay_ms>
	
	lcd_put_cmd(clear);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff54 	bl	80001ea <lcd_put_cmd>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <i2c_init>:
#include "stm32f10x.h"
#include "i2c.h"
void i2c_init(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<21);   //i2c1 hattininin clock unu aktif et
 8000350:	4a28      	ldr	r2, [pc, #160]	; (80003f4 <i2c_init+0xa8>)
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <i2c_init+0xa8>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800035a:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= (1<<0);    // Alternate function clock enable
 800035c:	4a25      	ldr	r2, [pc, #148]	; (80003f4 <i2c_init+0xa8>)
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <i2c_init+0xa8>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1<<3);    // gpiob clock enable
 8000368:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <i2c_init+0xa8>)
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <i2c_init+0xa8>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
	                            
	GPIOB->CRL |= (255<<24U);      //PB6 and PB7 open drain output
 8000374:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <i2c_init+0xac>)
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <i2c_init+0xac>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800037e:	6013      	str	r3, [r2, #0]
	
	I2C1->CR1 |= (1<<15);      // I2C is in under reset
 8000380:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <i2c_init+0xb0>)
 8000382:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <i2c_init+0xb0>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	b29b      	uxth	r3, r3
 8000388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800038c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000390:	b29b      	uxth	r3, r3
 8000392:	8013      	strh	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);     // I2C is not in under reset
 8000394:	4a19      	ldr	r2, [pc, #100]	; (80003fc <i2c_init+0xb0>)
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <i2c_init+0xb0>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29b      	uxth	r3, r3
 800039c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	8013      	strh	r3, [r2, #0]


	// Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	I2C1->CR2 |= (36<<0);  // PCLK1 FREQUENCY in MHz
 80003a4:	4a15      	ldr	r2, [pc, #84]	; (80003fc <i2c_init+0xb0>)
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <i2c_init+0xb0>)
 80003a8:	889b      	ldrh	r3, [r3, #4]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	8093      	strh	r3, [r2, #4]
	
	
	// Configure the clock control registers
	I2C1->CCR |= (180<<0);  // check calculation in PDF
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <i2c_init+0xb0>)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <i2c_init+0xb0>)
 80003b8:	8b9b      	ldrh	r3, [r3, #28]
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	f043 03b4 	orr.w	r3, r3, #180	; 0xb4
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	8393      	strh	r3, [r2, #28]
	// Configure the rise time register
	I2C1->TRISE = 37;  // check PDF again
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <i2c_init+0xb0>)
 80003c6:	2225      	movs	r2, #37	; 0x25
 80003c8:	841a      	strh	r2, [r3, #32]

	// Program the I2C_CR1 register to enable the peripheral
	I2C1->CR1 |= (1<<10);  // Enable the ACK
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <i2c_init+0xb0>)
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <i2c_init+0xb0>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	8013      	strh	r3, [r2, #0]
	I2C1->CR1 |= (1<<0);  // Enable I2C
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <i2c_init+0xb0>)
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <i2c_init+0xb0>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	8013      	strh	r3, [r2, #0]

}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	40005400 	.word	0x40005400

08000400 <i2c_start>:

void i2c_start (void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<10);  			// Enable the ACK
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <i2c_start+0x3c>)
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <i2c_start+0x3c>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000410:	b29b      	uxth	r3, r3
 8000412:	8013      	strh	r3, [r2, #0]
	I2C1->CR1 |= (1<<8);  			// Generate START
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <i2c_start+0x3c>)
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <i2c_start+0x3c>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	b29b      	uxth	r3, r3
 800041c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000420:	b29b      	uxth	r3, r3
 8000422:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & (1<<0)));  // Wait for SB bit to set
 8000424:	bf00      	nop
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <i2c_start+0x3c>)
 8000428:	8a9b      	ldrh	r3, [r3, #20]
 800042a:	b29b      	uxth	r3, r3
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f8      	beq.n	8000426 <i2c_start+0x26>
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40005400 	.word	0x40005400

08000440 <i2c_write>:

void i2c_write (uint8_t data)
{	
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 800044a:	bf00      	nop
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <i2c_write+0x3c>)
 800044e:	8a9b      	ldrh	r3, [r3, #20]
 8000450:	b29b      	uxth	r3, r3
 8000452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f8      	beq.n	800044c <i2c_write+0xc>
	I2C1->DR = data;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <i2c_write+0x3c>)
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	b292      	uxth	r2, r2
 8000460:	821a      	strh	r2, [r3, #16]
	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF bit to set
 8000462:	bf00      	nop
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <i2c_write+0x3c>)
 8000466:	8a9b      	ldrh	r3, [r3, #20]
 8000468:	b29b      	uxth	r3, r3
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f8      	beq.n	8000464 <i2c_write+0x24>
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40005400 	.word	0x40005400

08000480 <i2c_address>:

void i2c_address (uint8_t Address)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = Address;  					// send the address
 800048a:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <i2c_address+0x40>)
 800048c:	79fa      	ldrb	r2, [r7, #7]
 800048e:	b292      	uxth	r2, r2
 8000490:	821a      	strh	r2, [r3, #16]

	while (!(I2C1->SR1 & (1<<1)));  		// wait for ADDR bit to set
 8000492:	bf00      	nop
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <i2c_address+0x40>)
 8000496:	8a9b      	ldrh	r3, [r3, #20]
 8000498:	b29b      	uxth	r3, r3
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f8      	beq.n	8000494 <i2c_address+0x14>
	uint8_t temp = I2C1->SR1 | I2C1->SR2;  	// read SR1 and SR2 to clear the ADDR bit
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <i2c_address+0x40>)
 80004a4:	8a9b      	ldrh	r3, [r3, #20]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <i2c_address+0x40>)
 80004ac:	8b1b      	ldrh	r3, [r3, #24]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4313      	orrs	r3, r2
 80004b4:	73fb      	strb	r3, [r7, #15]
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40005400 	.word	0x40005400

080004c4 <i2c_stop>:

void i2c_stop (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<9);  // Stop I2C
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <i2c_stop+0x1c>)
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <i2c_stop+0x1c>)
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	8013      	strh	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40005400 	.word	0x40005400

080004e4 <i2c_write_multi>:

void i2c_write_multi (uint8_t *data, uint8_t size)
{	
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	while (!(I2C1->SR1 & (1<<7)));  				// wait for TXE bit to set
 80004f0:	bf00      	nop
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <i2c_write_multi+0x64>)
 80004f4:	8a9b      	ldrh	r3, [r3, #20]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0f8      	beq.n	80004f2 <i2c_write_multi+0xe>
	while (size)
 8000500:	e011      	b.n	8000526 <i2c_write_multi+0x42>
	{
		while (!(I2C1->SR1 & (1<<7)));  			// wait for TXE bit to set
 8000502:	bf00      	nop
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <i2c_write_multi+0x64>)
 8000506:	8a9b      	ldrh	r3, [r3, #20]
 8000508:	b29b      	uxth	r3, r3
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f8      	beq.n	8000504 <i2c_write_multi+0x20>
		I2C1->DR = (volatile uint32_t )*data++;  	// send data
 8000512:	490d      	ldr	r1, [pc, #52]	; (8000548 <i2c_write_multi+0x64>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	607a      	str	r2, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	820b      	strh	r3, [r1, #16]
		size--;
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	3b01      	subs	r3, #1
 8000524:	70fb      	strb	r3, [r7, #3]
	while (size)
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1ea      	bne.n	8000502 <i2c_write_multi+0x1e>
	}
	
	while (!(I2C1->SR1 & (1<<2)));  				// wait for BTF to set
 800052c:	bf00      	nop
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <i2c_write_multi+0x64>)
 8000530:	8a9b      	ldrh	r3, [r3, #20]
 8000532:	b29b      	uxth	r3, r3
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f8      	beq.n	800052e <i2c_write_multi+0x4a>
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40005400 	.word	0x40005400

0800054c <delay_ms>:
	while (!(TIM2->SR & (1<<0)));
}


void delay_ms (uint16_t ms)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	81fb      	strh	r3, [r7, #14]
 800055a:	e006      	b.n	800056a <delay_ms+0x1e>
	{
		delay_us (1000); // delay of 1 ms
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 f80b 	bl	800057a <delay_us>
	for (uint16_t i=0; i<ms; i++)
 8000564:	89fb      	ldrh	r3, [r7, #14]
 8000566:	3301      	adds	r3, #1
 8000568:	81fb      	strh	r3, [r7, #14]
 800056a:	89fa      	ldrh	r2, [r7, #14]
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	429a      	cmp	r2, r3
 8000570:	d3f4      	bcc.n	800055c <delay_ms+0x10>
	}
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <delay_us>:


void delay_us (uint16_t us)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 8000584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000588:	2200      	movs	r2, #0
 800058a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 800058c:	bf00      	nop
 800058e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000594:	b29b      	uxth	r3, r3
 8000596:	88fa      	ldrh	r2, [r7, #6]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f8      	bhi.n	800058e <delay_us+0x14>
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
	...

080005a8 <main>:

void makeItGoFast(void);


int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	makeItGoFast();
 80005ae:	f000 f821 	bl	80005f4 <makeItGoFast>
	i2c_init();
 80005b2:	f7ff fecb 	bl	800034c <i2c_init>
	lcd_init();
 80005b6:	f7ff fe6d 	bl	8000294 <lcd_init>
	lcd_put_curs(0,0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff fe52 	bl	8000266 <lcd_put_curs>
	lcd_put_string("RemoteController");
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <main+0x44>)
 80005c4:	f7ff fdfd 	bl	80001c2 <lcd_put_string>
	lcd_put_curs(6,1);
 80005c8:	2101      	movs	r1, #1
 80005ca:	2006      	movs	r0, #6
 80005cc:	f7ff fe4b 	bl	8000266 <lcd_put_curs>
	lcd_put_string("V1.0");
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0x48>)
 80005d2:	f7ff fdf6 	bl	80001c2 <lcd_put_string>
	delay_ms(3000);
 80005d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005da:	f7ff ffb7 	bl	800054c <delay_ms>


	int i = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]

	/* Infinite loop */
	while (1)
	{
		i++;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e7fb      	b.n	80005e2 <main+0x3a>
 80005ea:	bf00      	nop
 80005ec:	08000988 	.word	0x08000988
 80005f0:	0800099c 	.word	0x0800099c

080005f4 <makeItGoFast>:
	}
}

void makeItGoFast(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	   // Conf clock : 72MHz using HSE 8MHz crystal w/ PLL X 9 (8MHz x 9 = 72MHz)
    FLASH->ACR      |= FLASH_ACR_LATENCY_2; // Two wait states, per datasheet
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <makeItGoFast+0x8c>)
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <makeItGoFast+0x8c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	6013      	str	r3, [r2, #0]
    RCC->CFGR       |= RCC_CFGR_PPRE1_2;    // prescale APB1 = HCLK/2
 8000604:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <makeItGoFast+0x90>)
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <makeItGoFast+0x90>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800060e:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_HSEON;        // enable HSE clock
 8000610:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <makeItGoFast+0x90>)
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <makeItGoFast+0x90>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061a:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_HSERDY) );    // wait for the HSEREADY flag
 800061c:	bf00      	nop
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <makeItGoFast+0x90>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <makeItGoFast+0x2a>

    RCC->CFGR       |= RCC_CFGR_PLLSRC;     // set PLL source to HSE
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <makeItGoFast+0x90>)
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <makeItGoFast+0x90>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000634:	6053      	str	r3, [r2, #4]
    RCC->CFGR       |= RCC_CFGR_PLLMULL9;   // multiply by 9
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <makeItGoFast+0x90>)
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <makeItGoFast+0x90>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000640:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_PLLON;        // enable the PLL
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <makeItGoFast+0x90>)
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <makeItGoFast+0x90>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800064c:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_PLLRDY) );    // wait for the PLLRDY flag
 800064e:	bf00      	nop
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <makeItGoFast+0x90>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f9      	beq.n	8000650 <makeItGoFast+0x5c>

    RCC->CFGR       |= RCC_CFGR_SW_PLL;     // set clock source to pll
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <makeItGoFast+0x90>)
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <makeItGoFast+0x90>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6053      	str	r3, [r2, #4]

    while( !(RCC->CFGR & RCC_CFGR_SWS_PLL) );    // wait for PLL to be CLK
 8000668:	bf00      	nop
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <makeItGoFast+0x90>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <makeItGoFast+0x76>

    SystemCoreClockUpdate();                // calculate the SYSCLOCK value
 8000676:	f000 f865 	bl	8000744 <SystemCoreClockUpdate>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000
 8000684:	40021000 	.word	0x40021000

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800068c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800068e:	e003      	b.n	8000698 <LoopCopyDataInit>

08000690 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000692:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000694:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000696:	3104      	adds	r1, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800069c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800069e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006a0:	d3f6      	bcc.n	8000690 <CopyDataInit>
	ldr	r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80006a4:	e002      	b.n	80006ac <LoopFillZerobss>

080006a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006a8:	f842 3b04 	str.w	r3, [r2], #4

080006ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80006ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006b0:	d3f9      	bcc.n	80006a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f000 f813 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f000 f937 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff ff75 	bl	80005a8 <main>
	bx	lr
 80006be:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80006c4:	080009ac 	.word	0x080009ac
	ldr	r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006cc:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80006d0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80006d4:	20000030 	.word	0x20000030

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <SystemInit+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <SystemInit+0x5c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80006ec:	4912      	ldr	r1, [pc, #72]	; (8000738 <SystemInit+0x5c>)
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <SystemInit+0x5c>)
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <SystemInit+0x60>)
 80006f4:	4013      	ands	r3, r2
 80006f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006f8:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <SystemInit+0x5c>)
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <SystemInit+0x5c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000706:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <SystemInit+0x5c>)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <SystemInit+0x5c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000712:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000714:	4a08      	ldr	r2, [pc, #32]	; (8000738 <SystemInit+0x5c>)
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <SystemInit+0x5c>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800071e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SystemInit+0x5c>)
 8000722:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000726:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000728:	f000 f878 	bl	800081c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <SystemInit+0x64>)
 800072e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000732:	609a      	str	r2, [r3, #8]
#endif 
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	f8ff0000 	.word	0xf8ff0000
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <SystemCoreClockUpdate+0xc4>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f003 030c 	and.w	r3, r3, #12
 800075e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d007      	beq.n	8000776 <SystemCoreClockUpdate+0x32>
 8000766:	2b08      	cmp	r3, #8
 8000768:	d009      	beq.n	800077e <SystemCoreClockUpdate+0x3a>
 800076a:	2b00      	cmp	r3, #0
 800076c:	d133      	bne.n	80007d6 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <SystemCoreClockUpdate+0xc8>)
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemCoreClockUpdate+0xcc>)
 8000772:	601a      	str	r2, [r3, #0]
      break;
 8000774:	e033      	b.n	80007de <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <SystemCoreClockUpdate+0xc8>)
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <SystemCoreClockUpdate+0xcc>)
 800077a:	601a      	str	r2, [r3, #0]
      break;
 800077c:	e02f      	b.n	80007de <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemCoreClockUpdate+0xc4>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000786:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <SystemCoreClockUpdate+0xc4>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000790:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	0c9b      	lsrs	r3, r3, #18
 8000796:	3302      	adds	r3, #2
 8000798:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <SystemCoreClockUpdate+0xd0>)
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <SystemCoreClockUpdate+0xc8>)
 80007aa:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007ac:	e017      	b.n	80007de <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <SystemCoreClockUpdate+0xc4>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d006      	beq.n	80007c8 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4a15      	ldr	r2, [pc, #84]	; (8000814 <SystemCoreClockUpdate+0xd0>)
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <SystemCoreClockUpdate+0xc8>)
 80007c4:	6013      	str	r3, [r2, #0]
      break;
 80007c6:	e00a      	b.n	80007de <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <SystemCoreClockUpdate+0xcc>)
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <SystemCoreClockUpdate+0xc8>)
 80007d2:	6013      	str	r3, [r2, #0]
      break;
 80007d4:	e003      	b.n	80007de <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <SystemCoreClockUpdate+0xc8>)
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <SystemCoreClockUpdate+0xcc>)
 80007da:	601a      	str	r2, [r3, #0]
      break;
 80007dc:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <SystemCoreClockUpdate+0xc4>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	091b      	lsrs	r3, r3, #4
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <SystemCoreClockUpdate+0xd4>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <SystemCoreClockUpdate+0xc8>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	fa22 f303 	lsr.w	r3, r2, r3
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <SystemCoreClockUpdate+0xc8>)
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	40021000 	.word	0x40021000
 800080c:	20000000 	.word	0x20000000
 8000810:	007a1200 	.word	0x007a1200
 8000814:	003d0900 	.word	0x003d0900
 8000818:	20000004 	.word	0x20000004

0800081c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000820:	f000 f802 	bl	8000828 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000836:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <SetSysClockTo72+0xf8>)
 8000838:	4b39      	ldr	r3, [pc, #228]	; (8000920 <SetSysClockTo72+0xf8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000840:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <SetSysClockTo72+0xf8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d103      	bne.n	8000860 <SetSysClockTo72+0x38>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800085e:	d1f0      	bne.n	8000842 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <SetSysClockTo72+0xf8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	e001      	b.n	8000876 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d14b      	bne.n	8000914 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <SetSysClockTo72+0xfc>)
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <SetSysClockTo72+0xfc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000888:	4a26      	ldr	r2, [pc, #152]	; (8000924 <SetSysClockTo72+0xfc>)
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <SetSysClockTo72+0xfc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f023 0303 	bic.w	r3, r3, #3
 8000892:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <SetSysClockTo72+0xfc>)
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <SetSysClockTo72+0xfc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80008a0:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <SetSysClockTo72+0xf8>)
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SetSysClockTo72+0xf8>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <SetSysClockTo72+0xf8>)
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <SetSysClockTo72+0xf8>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <SetSysClockTo72+0xf8>)
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <SetSysClockTo72+0xf8>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ba:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80008bc:	4a18      	ldr	r2, [pc, #96]	; (8000920 <SetSysClockTo72+0xf8>)
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <SetSysClockTo72+0xf8>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80008c6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <SetSysClockTo72+0xf8>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <SetSysClockTo72+0xf8>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80008d2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <SetSysClockTo72+0xf8>)
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <SetSysClockTo72+0xf8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008de:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80008e0:	bf00      	nop
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <SetSysClockTo72+0xf8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <SetSysClockTo72+0xf8>)
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <SetSysClockTo72+0xf8>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f023 0303 	bic.w	r3, r3, #3
 80008f8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <SetSysClockTo72+0xf8>)
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SetSysClockTo72+0xf8>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000906:	bf00      	nop
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SetSysClockTo72+0xf8>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 030c 	and.w	r3, r3, #12
 8000910:	2b08      	cmp	r3, #8
 8000912:	d1f9      	bne.n	8000908 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	40022000 	.word	0x40022000

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	2500      	movs	r5, #0
 800092c:	4e0c      	ldr	r6, [pc, #48]	; (8000960 <__libc_init_array+0x38>)
 800092e:	4c0d      	ldr	r4, [pc, #52]	; (8000964 <__libc_init_array+0x3c>)
 8000930:	1ba4      	subs	r4, r4, r6
 8000932:	10a4      	asrs	r4, r4, #2
 8000934:	42a5      	cmp	r5, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	f000 f81a 	bl	8000970 <_init>
 800093c:	2500      	movs	r5, #0
 800093e:	4e0a      	ldr	r6, [pc, #40]	; (8000968 <__libc_init_array+0x40>)
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <__libc_init_array+0x44>)
 8000942:	1ba4      	subs	r4, r4, r6
 8000944:	10a4      	asrs	r4, r4, #2
 8000946:	42a5      	cmp	r5, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000950:	4798      	blx	r3
 8000952:	3501      	adds	r5, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800095a:	4798      	blx	r3
 800095c:	3501      	adds	r5, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	080009a4 	.word	0x080009a4
 8000964:	080009a4 	.word	0x080009a4
 8000968:	080009a4 	.word	0x080009a4
 800096c:	080009a8 	.word	0x080009a8

08000970 <_init>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr

0800097c <_fini>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	bf00      	nop
 8000980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000982:	bc08      	pop	{r3}
 8000984:	469e      	mov	lr, r3
 8000986:	4770      	bx	lr
