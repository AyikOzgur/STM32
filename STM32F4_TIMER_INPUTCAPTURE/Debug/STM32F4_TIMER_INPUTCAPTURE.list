
STM32F4_TIMER_INPUTCAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000514  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080006c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000004  080006c8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000030  080006c8  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000185c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000507  00000000  00000000  00021890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000f0  00000000  00000000  00021d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00021e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000008a3  00000000  00000000  00021f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000008d2  00000000  00000000  000227d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000230a5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000230  00000000  00000000  00023124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000694 	.word	0x08000694

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000694 	.word	0x08000694

080001d8 <clock_init>:
#include "stm32f4xx.h"
#include "System_clock.h"
extern volatile int millis;

void clock_init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	
	RCC->CR |= RCC_CR_HSEON;  
 80001dc:	4a1f      	ldr	r2, [pc, #124]	; (800025c <clock_init+0x84>)
 80001de:	4b1f      	ldr	r3, [pc, #124]	; (800025c <clock_init+0x84>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80001e8:	bf00      	nop
 80001ea:	4b1c      	ldr	r3, [pc, #112]	; (800025c <clock_init+0x84>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0f9      	beq.n	80001ea <clock_init+0x12>
	
	
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_3WS;
 80001f6:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <clock_init+0x88>)
 80001f8:	f240 1203 	movw	r2, #259	; 0x103
 80001fc:	601a      	str	r2, [r3, #0]
	
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // 
 80001fe:	4a17      	ldr	r2, [pc, #92]	; (800025c <clock_init+0x84>)
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <clock_init+0x84>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	6093      	str	r3, [r2, #8]
	
	                              
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <clock_init+0x84>)
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <clock_init+0x84>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000210:	6093      	str	r3, [r2, #8]
	
	
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;    //M:25  N:400 P:4
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <clock_init+0x84>)
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <clock_init+0x84>)
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	6093      	str	r3, [r2, #8]
	
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <clock_init+0x84>)
 800021c:	4a11      	ldr	r2, [pc, #68]	; (8000264 <clock_init+0x8c>)
 800021e:	605a      	str	r2, [r3, #4]
	
	RCC->CR |= RCC_CR_PLLON;
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <clock_init+0x84>)
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <clock_init+0x84>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 800022c:	bf00      	nop
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <clock_init+0x84>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <clock_init+0x56>
	
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800023a:	4a08      	ldr	r2, [pc, #32]	; (800025c <clock_init+0x84>)
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <clock_init+0x84>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f043 0302 	orr.w	r3, r3, #2
 8000244:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000246:	bf00      	nop
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <clock_init+0x84>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f9      	beq.n	8000248 <clock_init+0x70>
	
	SystemCoreClockUpdate();
 8000254:	f000 f980 	bl	8000558 <SystemCoreClockUpdate>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40023800 	.word	0x40023800
 8000260:	40023c00 	.word	0x40023c00
 8000264:	00416419 	.word	0x00416419

08000268 <SysTick_Handler>:

}

	
void SysTick_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
	...

08000278 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000282:	4909      	ldr	r1, [pc, #36]	; (80002a8 <NVIC_EnableIRQ+0x30>)
 8000284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000288:	095b      	lsrs	r3, r3, #5
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	f002 021f 	and.w	r2, r2, #31
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	da0b      	bge.n	80002d8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	490d      	ldr	r1, [pc, #52]	; (80002f8 <NVIC_SetPriority+0x4c>)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 030f 	and.w	r3, r3, #15
 80002c8:	3b04      	subs	r3, #4
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d6:	e009      	b.n	80002ec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	4908      	ldr	r1, [pc, #32]	; (80002fc <NVIC_SetPriority+0x50>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	0112      	lsls	r2, r2, #4
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	440b      	add	r3, r1
 80002e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00
 80002fc:	e000e100 	.word	0xe000e100

08000300 <timer2_init>:

#include "timer.h"


void timer2_init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	// 1 - Turn on timer2 clock
	RCC->APB1ENR |= (1<<0);
 8000304:	4a2d      	ldr	r2, [pc, #180]	; (80003bc <timer2_init+0xbc>)
 8000306:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <timer2_init+0xbc>)
 8000308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6413      	str	r3, [r2, #64]	; 0x40

	// 2 - Turn on GPIOA clock, input pin is connected to PA1
	RCC->AHB1ENR |= (1<<0);
 8000310:	4a2a      	ldr	r2, [pc, #168]	; (80003bc <timer2_init+0xbc>)
 8000312:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <timer2_init+0xbc>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	; 0x30

	// 3 - PA1 GPIO setup
	GPIOA->MODER |= (1<<3);
 800031c:	4a28      	ldr	r2, [pc, #160]	; (80003c0 <timer2_init+0xc0>)
 800031e:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <timer2_init+0xc0>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<2); // Set as alternate func
 8000328:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <timer2_init+0xc0>)
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <timer2_init+0xc0>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f023 0304 	bic.w	r3, r3, #4
 8000332:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] = 0b000000000010001; // AF1
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <timer2_init+0xc0>)
 8000336:	2211      	movs	r2, #17
 8000338:	621a      	str	r2, [r3, #32]

	// 4 - TIMER2 setup
	TIM2->PSC = 99;
 800033a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033e:	2263      	movs	r2, #99	; 0x63
 8000340:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR =4000000;
 8000342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000346:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <timer2_init+0xc4>)
 8000348:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (1<<0);   		// Counter is active
 800034a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6013      	str	r3, [r2, #0]
	TIM2->CCMR1 |= (1<<8); 		// CC2 channel is configured as input, IC2 is mapped on TI2.
 800035a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800035e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000368:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<4);  		// Capture is active
 800036a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6213      	str	r3, [r2, #32]
	TIM2->DIER |= (1<<0);  		// update interrupt active
 800037a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= (1<<2); 		// ch2 interrupt active
 800038a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	60d3      	str	r3, [r2, #12]
	TIM2->CCER &= ~TIM_CCER_CC2P; // polarity mode is rising edge
 800039a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	f023 0320 	bic.w	r3, r3, #32
 80003a8:	6213      	str	r3, [r2, #32]

	// 5 - TIMER2 NVIC setup
	NVIC_EnableIRQ(TIM2_IRQn);
 80003aa:	201c      	movs	r0, #28
 80003ac:	f7ff ff64 	bl	8000278 <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0x03);
 80003b0:	2103      	movs	r1, #3
 80003b2:	201c      	movs	r0, #28
 80003b4:	f7ff ff7a 	bl	80002ac <NVIC_SetPriority>

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020000 	.word	0x40020000
 80003c4:	003d0900 	.word	0x003d0900

080003c8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_CC2IF)					//check if correspoing interrupt has came, this IRQHandler is common for all chanels
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d042      	beq.n	8000460 <TIM2_IRQHandler+0x98>
	{
		if ((TIM2->CCER & TIM_CCER_CC2P) == 0)
 80003da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d10d      	bne.n	8000404 <TIM2_IRQHandler+0x3c>
		{
			ch2_rising = TIM2->CCR2;      		// save CCR2 value at rising edge
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003ee:	4a1f      	ldr	r2, [pc, #124]	; (800046c <TIM2_IRQHandler+0xa4>)
 80003f0:	6013      	str	r3, [r2, #0]
			TIM2->CCER |= TIM_CCER_CC2P; 		// change polarity to falling edge
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	6213      	str	r3, [r2, #32]
 8000402:	e025      	b.n	8000450 <TIM2_IRQHandler+0x88>
		}

		else
		{
			ch2_falling = TIM2->CCR2;				//save falling edge value
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800040a:	4a19      	ldr	r2, [pc, #100]	; (8000470 <TIM2_IRQHandler+0xa8>)
 800040c:	6013      	str	r3, [r2, #0]
			diff = ch2_falling - ch2_rising;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <TIM2_IRQHandler+0xa8>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <TIM2_IRQHandler+0xa4>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <TIM2_IRQHandler+0xac>)
 800041a:	6013      	str	r3, [r2, #0]
			if (diff < 0)
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <TIM2_IRQHandler+0xac>)
 800041e:	681b      	ldr	r3, [r3, #0]
			diff += 0xFFFF;    					// if result is negative, trasfer it to positive region
			if (diff < 2010 && diff > 990)
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <TIM2_IRQHandler+0xac>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8000428:	4293      	cmp	r3, r2
 800042a:	d809      	bhi.n	8000440 <TIM2_IRQHandler+0x78>
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <TIM2_IRQHandler+0xac>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f240 32de 	movw	r2, #990	; 0x3de
 8000434:	4293      	cmp	r3, r2
 8000436:	d903      	bls.n	8000440 <TIM2_IRQHandler+0x78>
			ch2 = diff;
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <TIM2_IRQHandler+0xac>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <TIM2_IRQHandler+0xb0>)
 800043e:	6013      	str	r3, [r2, #0]
			TIM2->CCER &= ~TIM_CCER_CC2P; 		// change polarity to rising
 8000440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000448:	6a1b      	ldr	r3, [r3, #32]
 800044a:	f023 0320 	bic.w	r3, r3, #32
 800044e:	6213      	str	r3, [r2, #32]
		}

		TIM2->SR &= ~TIM_SR_CC2IF; 				// clear interrupt flag
 8000450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	f023 0304 	bic.w	r3, r3, #4
 800045e:	6113      	str	r3, [r2, #16]
	}
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000020 	.word	0x20000020
 8000470:	20000028 	.word	0x20000028
 8000474:	2000002c 	.word	0x2000002c
 8000478:	20000024 	.word	0x20000024

0800047c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	clock_init();
 8000482:	f7ff fea9 	bl	80001d8 <clock_init>
	timer2_init();
 8000486:	f7ff ff3b 	bl	8000300 <timer2_init>
	int i = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]


	while (1)
	{
		i++;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3301      	adds	r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	e7fb      	b.n	800048e <main+0x12>
	...

08000498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800049c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800049e:	e003      	b.n	80004a8 <LoopCopyDataInit>

080004a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004a6:	3104      	adds	r1, #4

080004a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004b0:	d3f6      	bcc.n	80004a0 <CopyDataInit>
  ldr  r2, =_sbss
 80004b2:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004b4:	e002      	b.n	80004bc <LoopFillZerobss>

080004b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004b8:	f842 3b04 	str.w	r3, [r2], #4

080004bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004c0:	d3f9      	bcc.n	80004b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004c2:	f000 f813 	bl	80004ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004c6:	f000 f8c1 	bl	800064c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ca:	f7ff ffd7 	bl	800047c <main>
  bx  lr    
 80004ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004d4:	080006c4 	.word	0x080006c4
  ldr  r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004dc:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80004e0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80004e4:	20000030 	.word	0x20000030

080004e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC_IRQHandler>
	...

080004ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <SystemInit+0x60>)
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <SystemInit+0x60>)
 80004f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <SystemInit+0x64>)
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <SystemInit+0x64>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <SystemInit+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <SystemInit+0x64>)
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <SystemInit+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <SystemInit+0x64>)
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <SystemInit+0x68>)
 8000526:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <SystemInit+0x64>)
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <SystemInit+0x64>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SystemInit+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <SystemInit+0x60>)
 800053c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000540:	609a      	str	r2, [r3, #8]
#endif
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	40023800 	.word	0x40023800
 8000554:	24003010 	.word	0x24003010

08000558 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b087      	sub	sp, #28
 800055c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	2302      	movs	r3, #2
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	2302      	movs	r3, #2
 8000570:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	f003 030c 	and.w	r3, r3, #12
 800057a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	2b04      	cmp	r3, #4
 8000580:	d007      	beq.n	8000592 <SystemCoreClockUpdate+0x3a>
 8000582:	2b08      	cmp	r3, #8
 8000584:	d009      	beq.n	800059a <SystemCoreClockUpdate+0x42>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d13d      	bne.n	8000606 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <SystemCoreClockUpdate+0xe4>)
 800058c:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <SystemCoreClockUpdate+0xe8>)
 800058e:	601a      	str	r2, [r3, #0]
      break;
 8000590:	e03d      	b.n	800060e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <SystemCoreClockUpdate+0xe4>)
 8000594:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <SystemCoreClockUpdate+0xec>)
 8000596:	601a      	str	r2, [r3, #0]
      break;
 8000598:	e039      	b.n	800060e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	0d9b      	lsrs	r3, r3, #22
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005ae:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005b6:	4a23      	ldr	r2, [pc, #140]	; (8000644 <SystemCoreClockUpdate+0xec>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 80005c0:	6852      	ldr	r2, [r2, #4]
 80005c2:	0992      	lsrs	r2, r2, #6
 80005c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e00b      	b.n	80005e8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemCoreClockUpdate+0xe8>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4a17      	ldr	r2, [pc, #92]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 80005da:	6852      	ldr	r2, [r2, #4]
 80005dc:	0992      	lsrs	r2, r2, #6
 80005de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	0c1b      	lsrs	r3, r3, #16
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	3301      	adds	r3, #1
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <SystemCoreClockUpdate+0xe4>)
 8000602:	6013      	str	r3, [r2, #0]
      break;
 8000604:	e003      	b.n	800060e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <SystemCoreClockUpdate+0xe4>)
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <SystemCoreClockUpdate+0xe8>)
 800060a:	601a      	str	r2, [r3, #0]
      break;
 800060c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <SystemCoreClockUpdate+0xe0>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	091b      	lsrs	r3, r3, #4
 8000614:	f003 030f 	and.w	r3, r3, #15
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <SystemCoreClockUpdate+0xf0>)
 800061a:	5cd3      	ldrb	r3, [r2, r3]
 800061c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <SystemCoreClockUpdate+0xe4>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <SystemCoreClockUpdate+0xe4>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	371c      	adds	r7, #28
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40023800 	.word	0x40023800
 800063c:	20000000 	.word	0x20000000
 8000640:	00f42400 	.word	0x00f42400
 8000644:	017d7840 	.word	0x017d7840
 8000648:	080006ac 	.word	0x080006ac

0800064c <__libc_init_array>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	4e0d      	ldr	r6, [pc, #52]	; (8000684 <__libc_init_array+0x38>)
 8000650:	4c0d      	ldr	r4, [pc, #52]	; (8000688 <__libc_init_array+0x3c>)
 8000652:	1ba4      	subs	r4, r4, r6
 8000654:	10a4      	asrs	r4, r4, #2
 8000656:	2500      	movs	r5, #0
 8000658:	42a5      	cmp	r5, r4
 800065a:	d109      	bne.n	8000670 <__libc_init_array+0x24>
 800065c:	4e0b      	ldr	r6, [pc, #44]	; (800068c <__libc_init_array+0x40>)
 800065e:	4c0c      	ldr	r4, [pc, #48]	; (8000690 <__libc_init_array+0x44>)
 8000660:	f000 f818 	bl	8000694 <_init>
 8000664:	1ba4      	subs	r4, r4, r6
 8000666:	10a4      	asrs	r4, r4, #2
 8000668:	2500      	movs	r5, #0
 800066a:	42a5      	cmp	r5, r4
 800066c:	d105      	bne.n	800067a <__libc_init_array+0x2e>
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000674:	4798      	blx	r3
 8000676:	3501      	adds	r5, #1
 8000678:	e7ee      	b.n	8000658 <__libc_init_array+0xc>
 800067a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800067e:	4798      	blx	r3
 8000680:	3501      	adds	r5, #1
 8000682:	e7f2      	b.n	800066a <__libc_init_array+0x1e>
 8000684:	080006bc 	.word	0x080006bc
 8000688:	080006bc 	.word	0x080006bc
 800068c:	080006bc 	.word	0x080006bc
 8000690:	080006c0 	.word	0x080006c0

08000694 <_init>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr

080006a0 <_fini>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	bf00      	nop
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr
